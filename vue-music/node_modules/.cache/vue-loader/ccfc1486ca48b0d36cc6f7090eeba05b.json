{"remainingRequest":"C:\\Users\\zlw12\\Desktop\\store\\vue-music\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\zlw12\\Desktop\\store\\vue-music\\src\\components\\common\\search\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\zlw12\\Desktop\\store\\vue-music\\src\\components\\common\\search\\index.vue","mtime":1605003257689},{"path":"C:\\Users\\zlw12\\Desktop\\store\\vue-music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\zlw12\\Desktop\\store\\vue-music\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\zlw12\\Desktop\\store\\vue-music\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\zlw12\\Desktop\\store\\vue-music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\zlw12\\Desktop\\store\\vue-music\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgU3RhciBmcm9tICcuLi9zdGFyJw0KaW1wb3J0IFNlYXJjaElucHV0IGZyb20gJy4uL2lucHV0Jw0KaW1wb3J0IFNvbmdMaXN0IGZyb20gJy4uL3NvbmctbGlzdCcNCmltcG9ydCBTb25nU2hlZXQgZnJvbSAnLi4vc29uZ3NoZWV0L3NvbmdzaGVldF9zY3NzJw0KaW1wb3J0IFNpbmdlciBmcm9tICcuLi9zaW5nZXIvc2luZ2VyJw0KaW1wb3J0IEFsYnVtIGZyb20gJy4uL2FsYnVtJw0KaW1wb3J0IEVycm9yIGZyb20gJy4uL2Vycm9yJw0KZXhwb3J0IGRlZmF1bHQgew0KICBkYXRhKCl7DQogICAgcmV0dXJuew0KICAgICAga2V5d29yZHM6IHRoaXMuJHJvdXRlLnF1ZXJ5LmtleXdvcmRzLA0KICAgICAgbGVuOiBudWxsLA0KICAgICAgY3VyOiAnJywNCiAgICAgIHR5cGU6IFtdLA0KICAgICAgbGlzdDogW10sDQogICAgfQ0KICB9LA0KICBjb21wb25lbnRzOiB7DQogICAgU3RhciwNCiAgICBTZWFyY2hJbnB1dCwNCiAgICBTb25nTGlzdCwNCiAgICBTb25nU2hlZXQsDQogICAgU2luZ2VyLA0KICAgIEFsYnVtLA0KICAgIEVycm9yLA0KICB9LA0KICB3YXRjaDp7DQogICAgJHJvdXRlKHZhbCl7DQogICAgICBjb25zb2xlLmxvZyh2YWwpDQogICAgICB0aGlzLmdldFNlYXJjaCgpOw0KICAgIH0NCiAgfSwNCiAgbW91bnRlZCgpew0KICAgIHRoaXMuaW5pdCgpOw0KICB9LA0KICBtZXRob2RzOiB7DQogICAgaW5pdCgpew0KICAgICAgdGhpcy5UeXBlKCk7DQogICAgICB0aGlzLmdldFNlYXJjaCgpOw0KICAgIH0sDQoNCiAgICAvLyDojrflj5bmkJzntKLkv6Hmga8NCiAgICBhc3luYyBnZXRTZWFyY2goKXsNCiAgICAgIHRoaXMua2V5d29yZHMgPSB0aGlzLiRyb3V0ZS5xdWVyeS5rZXl3b3JkczsNCiAgICAgIGxldCBrZXl3b3JkcyA9IHRoaXMua2V5d29yZHM7DQogICAgICBsZXQgdHlwZSA9IHRoaXMuJHJvdXRlLnF1ZXJ5LnR5cGU7DQogICAgICBsZXQgcGFyYW1zID0gew0KICAgICAgICBrZXl3b3JkcywNCiAgICAgICAgdHlwZSwNCiAgICAgIH0NCiAgICAgIGxldCBhY3Rpb24gPSBuZXcgTWFwKFsNCiAgICAgICAgWzEsIGxpc3QgPT4gew0KICAgICAgICAgIGxldCBpZDsNCiAgICAgICAgICBpZCA9IHRoaXMudXRpbHMuTXVzaWNJZChsaXN0KQ0KICAgICAgICAgIHRoaXMuZ2V0U29uZ0RldGFpbChpZCkNCiAgICAgICAgfV0sDQogICAgICAgIFsxMCwgbGlzdCA9PiB0aGlzLmxpc3QgPSBsaXN0XSwNCiAgICAgICAgWzEwMCwgbGlzdCA9PiB0aGlzLmxpc3QgPSBsaXN0XSwNCiAgICAgICAgWzEwMDAsIGxpc3QgPT4gdGhpcy5saXN0ID0gbGlzdF0NCg0KICAgICAgXSkNCiAgICAgIGF3YWl0IHRoaXMuJGFwaS5TZWFyY2gocGFyYW1zKQ0KICAgICAgICAudGhlbihyZXMgPT4gew0KICAgICAgICAgIGNvbnNvbGUubG9nKHJlcykNCiAgICAgICAgICBsZXQgaW5kZXg7DQogICAgICAgICAgdGhpcy50eXBlLnNvbWUoIGxpc3QgPT4gew0KICAgICAgICAgICAgaWYobGlzdC5udW0gPT0gdGhpcy4kcm91dGUucXVlcnkudHlwZSl7DQogICAgICAgICAgICAgIGluZGV4ID0gbGlzdC50eXBlOw0KICAgICAgICAgICAgICB0aGlzLmN1ciA9IHsNCiAgICAgICAgICAgICAgICBuYW1lOiBsaXN0Lm5hbWUsDQogICAgICAgICAgICAgICAgdHlwZTogbGlzdC5udW0sDQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0pDQogICAgICAgICAgdGhpcy5sZW4gPSByZXMuZGF0YS5yZXN1bHRbaW5kZXhdLmxlbmd0aDsNCiAgICAgICAgICBjb25zb2xlLmxvZyhyZXMuZGF0YS5yZXN1bHRbaW5kZXhdLHRoaXMuY3VyKQ0KICAgICAgICAgIGFjdGlvbi5nZXQodGhpcy5jdXIudHlwZSkocmVzLmRhdGEucmVzdWx0W2luZGV4XSk7DQogICAgICAgIH0pDQogICAgICANCiAgICB9LA0KDQoNCiAgICAvLyB0eXBl56eN57G7DQogICAgVHlwZSgpew0KICAgICAgbGV0IG9iaiA9IFsNCiAgICAgICAgew0KICAgICAgICAgIG5hbWU6ICfljZXmm7InLA0KICAgICAgICAgIHR5cGU6ICdzb25ncycsDQogICAgICAgICAgbnVtOiAxLA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgbmFtZTogJ+S4k+i+kScsDQogICAgICAgICAgdHlwZTogJ2FsYnVtcycsDQogICAgICAgICAgbnVtOiAxMCwNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgIG5hbWU6ICfmrYzmiYsnLA0KICAgICAgICAgIHR5cGU6ICdhcnRpc3RzJywNCiAgICAgICAgICBudW06IDEwMCwNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgIG5hbWU6ICfmrYzljZUnLA0KICAgICAgICAgIHR5cGU6ICdwbGF5bGlzdHMnLA0KICAgICAgICAgIG51bTogMTAwMCwNCiAgICAgICAgfSwNCiAgICAgIF0NCiAgICAgIHRoaXMudHlwZSA9IG9iajsNCiAgICB9LA0KDQogICAgLy8g5pS55Y+Y5pCc57Si5YaF5a65DQogICAgY2hhbmdlVHlwZShudW0pew0KICAgICAgaWYobnVtID09IHRoaXMuY3VyLnR5cGUpIHJldHVybjsNCiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtuYW1lOiAnc2VhcmNoJyxxdWVyeTogew0KICAgICAgICBrZXl3b3JkczogdGhpcy5rZXl3b3JkcywNCiAgICAgICAgdHlwZTogbnVtLA0KICAgICAgfX0pDQogICAgICB0aGlzLmdldFNlYXJjaCgpOw0KICAgIH0sDQoNCiAgICAvLyDojrflj5bpn7PkuZDor6bmg4UNCiAgICBhc3luYyBnZXRTb25nRGV0YWlsKGlkKXsNCiAgICAgIGF3YWl0IHRoaXMuJGFwaS5Tb25nRGV0YWlsKGlkKQ0KICAgICAgICAudGhlbiggcmVzID0+IHsNCiAgICAgICAgICB0aGlzLmxpc3QgPSByZXMuZGF0YS5zb25nczsNCiAgICAgICAgfSkNCiAgICB9LA0KDQogICAgLy8g6I635Y+W5q2M5Y2V6K+m5oOFDQogICAgYXN5bmMgZ2V0U29uZ1NoZWV0KHBhcmFtcyl7DQogICAgICBhd2FpdCB0aGlzLiRhcGkuVG9wUGxheWxpc3QocGFyYW1zKQ0KICAgICAgICAudGhlbiggcmVzID0+IHsNCiAgICAgICAgICB0aGlzLnNvbmdTaGVldCA9IHJlcy5kYXRhLnBsYXlsaXN0cw0KICAgICAgICAgIHRoaXMudG90YWwgPSByZXMuZGF0YS50b3RhbDsNCiAgICAgICAgICB0aGlzLiRyZWZzLnNvcnQuaW5uZXJIVE1MID0gcmVzLmRhdGEuY2F0Ow0KICAgICAgICB9KQ0KICAgIH0sDQoNCg0KDQogICAgDQogIH0NCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"index.vue","sourceRoot":"src/components/common/search","sourcesContent":["<template>\r\n  <div class=\"search-detail\">\r\n    <div class=\"search-btn\">\r\n      <star></star> \r\n      <div class=\"btn-search\">\r\n        <search-input></search-input>\r\n      </div>\r\n    </div>\r\n    <div class=\"container\">\r\n      <div class=\"kind-btn\">\r\n        <div class=\"title\">\r\n          <small>搜索\"{{ keywords }}\",找到{{len + '个' + cur.name}}</small>\r\n        </div>\r\n        <ul class=\"btn\">\r\n          <li \r\n            v-for=\"item in type\" \r\n            :key=\"item.type\"\r\n            :class=\"cur.name == item.name ? 'is-active' : ''\"\r\n            @click=\"changeType(item.num)\"\r\n          >\r\n            {{ item.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"main\">\r\n        <song-list :songLists=\"list\" v-if=\"cur.type == 1\" />\r\n        <singer :artist=\"list\" v-if=\"cur.type == 100\" />\r\n        <song-sheet :songLists=\"list\" v-if=\"cur.type == 1000\" />\r\n        <album :list=\"list\" v-if=\"cur.type == 10\" />\r\n        <error v-if=\"!list\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Star from '../star'\r\nimport SearchInput from '../input'\r\nimport SongList from '../song-list'\r\nimport SongSheet from '../songsheet/songsheet_scss'\r\nimport Singer from '../singer/singer'\r\nimport Album from '../album'\r\nimport Error from '../error'\r\nexport default {\r\n  data(){\r\n    return{\r\n      keywords: this.$route.query.keywords,\r\n      len: null,\r\n      cur: '',\r\n      type: [],\r\n      list: [],\r\n    }\r\n  },\r\n  components: {\r\n    Star,\r\n    SearchInput,\r\n    SongList,\r\n    SongSheet,\r\n    Singer,\r\n    Album,\r\n    Error,\r\n  },\r\n  watch:{\r\n    $route(val){\r\n      console.log(val)\r\n      this.getSearch();\r\n    }\r\n  },\r\n  mounted(){\r\n    this.init();\r\n  },\r\n  methods: {\r\n    init(){\r\n      this.Type();\r\n      this.getSearch();\r\n    },\r\n\r\n    // 获取搜索信息\r\n    async getSearch(){\r\n      this.keywords = this.$route.query.keywords;\r\n      let keywords = this.keywords;\r\n      let type = this.$route.query.type;\r\n      let params = {\r\n        keywords,\r\n        type,\r\n      }\r\n      let action = new Map([\r\n        [1, list => {\r\n          let id;\r\n          id = this.utils.MusicId(list)\r\n          this.getSongDetail(id)\r\n        }],\r\n        [10, list => this.list = list],\r\n        [100, list => this.list = list],\r\n        [1000, list => this.list = list]\r\n\r\n      ])\r\n      await this.$api.Search(params)\r\n        .then(res => {\r\n          console.log(res)\r\n          let index;\r\n          this.type.some( list => {\r\n            if(list.num == this.$route.query.type){\r\n              index = list.type;\r\n              this.cur = {\r\n                name: list.name,\r\n                type: list.num,\r\n              }\r\n              return;\r\n            }\r\n          })\r\n          this.len = res.data.result[index].length;\r\n          console.log(res.data.result[index],this.cur)\r\n          action.get(this.cur.type)(res.data.result[index]);\r\n        })\r\n      \r\n    },\r\n\r\n\r\n    // type种类\r\n    Type(){\r\n      let obj = [\r\n        {\r\n          name: '单曲',\r\n          type: 'songs',\r\n          num: 1,\r\n        },\r\n        {\r\n          name: '专辑',\r\n          type: 'albums',\r\n          num: 10,\r\n        },\r\n        {\r\n          name: '歌手',\r\n          type: 'artists',\r\n          num: 100,\r\n        },\r\n        {\r\n          name: '歌单',\r\n          type: 'playlists',\r\n          num: 1000,\r\n        },\r\n      ]\r\n      this.type = obj;\r\n    },\r\n\r\n    // 改变搜索内容\r\n    changeType(num){\r\n      if(num == this.cur.type) return;\r\n      this.$router.push({name: 'search',query: {\r\n        keywords: this.keywords,\r\n        type: num,\r\n      }})\r\n      this.getSearch();\r\n    },\r\n\r\n    // 获取音乐详情\r\n    async getSongDetail(id){\r\n      await this.$api.SongDetail(id)\r\n        .then( res => {\r\n          this.list = res.data.songs;\r\n        })\r\n    },\r\n\r\n    // 获取歌单详情\r\n    async getSongSheet(params){\r\n      await this.$api.TopPlaylist(params)\r\n        .then( res => {\r\n          this.songSheet = res.data.playlists\r\n          this.total = res.data.total;\r\n          this.$refs.sort.innerHTML = res.data.cat;\r\n        })\r\n    },\r\n\r\n\r\n\r\n    \r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .search-btn{\r\n    @include flex;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 250px;\r\n    background: #000;\r\n    .btn-search{\r\n      height: 55px;\r\n    }\r\n    .input{\r\n      width: 720px;\r\n    }\r\n  }\r\n  .container{\r\n    @include shadow;\r\n    .kind-btn{\r\n      margin-top: 28px;\r\n      padding: 10px 0 0 10px;\r\n      .title{\r\n        margin-bottom: 17px;\r\n        color: #999;\r\n      }\r\n      .btn{\r\n        margin-bottom: 42px;\r\n        display: flex;\r\n        li{\r\n          margin-right: 34px;\r\n          color: #333;\r\n          font-weight: 300;\r\n          cursor: pointer;\r\n          &.is-active{\r\n            color: $mainColor;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>"]}]}